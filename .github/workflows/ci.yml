name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

jobs:
  # 代码质量检查
  lint:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🔍 ESLint 检查
        run: npm run lint

      - name: 📊 TypeScript 类型检查
        run: npx tsc --noEmit

  # 单元测试
  test:
    name: 🧪 运行测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🧪 运行测试
        run: npm run test:run

      - name: 📈 生成覆盖率报告
        if: matrix.node-version == 18
        run: npm run test:coverage

      - name: 📊 上传覆盖率报告
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 构建检查
  build:
    name: 🏗️ 构建检查
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🏗️ 构建项目
        run: npm run build

      - name: 📦 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # 安全扫描
  security:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🔍 依赖安全审计
        run: npm audit --audit-level=moderate

      - name: 🛡️ CodeQL 分析
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 自动构建
        uses: github/codeql-action/autobuild@v3

      - name: 📊 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # 浏览器兼容性测试
  browser-test:
    name: 🌐 浏览器兼容性测试
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 📦 下载构建产物
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: dist/

      - name: 🌐 启动预览服务器
        run: |
          npm run preview &
          sleep 5

      - name: 🧪 运行 E2E 测试 (${{ matrix.browser }})
        run: |
          # 这里可以添加 Playwright 或 Cypress 测试
          echo "Running E2E tests on ${{ matrix.browser }}"

  # 部署到 GitHub Pages (仅在 main 分支)
  deploy:
    name: 🚀 部署到 GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🏗️ 构建项目
        run: npm run build

      - name: ⚙️ 设置 Pages
        uses: actions/configure-pages@v5

      - name: 📤 上传到 Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: './dist'

      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 发布 Release (仅在 release 事件)
  release:
    name: 📦 发布 Release
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: github.event_name == 'release'
    permissions:
      contents: write
      actions: read
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 安装依赖
        run: npm ci

      - name: 🏗️ 构建项目
        run: npm run build

      - name: 📦 打包发布文件
        run: |
          zip -r release.zip dist/ README.md LICENSE CHANGELOG.md

      - name: 📤 上传 Release 资产
        uses: softprops/action-gh-release@v2
        with:
          files: release.zip
          name: secure-password-generator-${{ github.event.release.tag_name }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  # 依赖更新检查 (每周运行)
  dependency-update:
    name: 🔄 依赖更新检查
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v5

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔍 检查过时依赖
        run: npm outdated || true

      - name: 🔒 安全审计
        run: npm audit || true